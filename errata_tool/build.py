from errata_tool import ErrataConnector
from errata_tool import Erratum


class Build(ErrataConnector):
    def __init__(self, nvr):
        """Find build information and advisories where the build is attached.

        :param nvr: build NVR (name-version-release)
        """
        self.nvr = nvr
        self.url = self._url + '/api/v1/build/%s' % self.nvr
        self._released_errata = None
        self._all_errata = []
        self._signed_rpms = None
        self._data = {}
        self._files = []

        self._fetch()

    def _fetch(self):
        """Fetch build data from Errata Tool API and store to properties"""
        self._data = self._get(self.url)

        if self._data['released_errata'] is not None:
            self._released_errata = Erratum(errata_id=self._data[
                'released_errata']['id'])

        for errata_dict in self._data['all_errata']:
            errata = Erratum(errata_id=errata_dict['id'])
            self._all_errata.append(errata)

        self._signed_rpms = self._data.get('rpms_signed')

        for et_file in self._data['files']:
            self._files.append(et_file['path'])

    @property
    def all_errata(self):
        """List of all Erratas where the build is attached

        :return: list of Errata objects
        """
        return self._all_errata

    @property
    def released_errata(self):
        """Released Errata

        :return: Errata object
        """
        return self._released_errata

    @property
    def files(self):
        """List of file path generated by build

        :return: list of string paths
        """
        return self._files

    @property
    def signed_rpms(self):
        """Signed rpms flag

        :return: boolean True/False
        """
        return self._signed_rpms

    def __getattr__(self, name):
        return self._data.get(name)

    def __repr__(self):
        return 'Build(%s)' % self.nvr

    def __str__(self):
        """Convert build object to string representation

        :return: build info string
        """
        output = "Build NVR: %s\n\n" % self.nvr
        if self.released_errata is not None:
            output += 'Released errata: %s\n' % \
                      self.released_errata.errata_name
        output += "Erratas:\n"
        for errata in self.all_errata:
            output += str(errata)

        output += 'Files:\n'
        for et_file in self.files:
            output += '  - %s' % et_file
        return output
